---
# File: tasks/main.yml - Main tasks for Consul

- name: Check distribution compatibility
  fail:
    msg: "{{ ansible_distribution }} is not currently supported by this role."
  when: ansible_distribution not in ['RedHat', 'CentOS', 'Debian', 'Ubuntu', 'Fedora']

- name: Fail if not a new release of CentOS or Red Hat
  fail:
    msg: "{{ ansible_distribution_version }} isn't a supported version."
  when: ansible_distribution in ['RedHat', 'CentOS'] and ansible_distribution_version|version_compare(6, '<')

- name: Fail if not a new release of Debian
  fail:
    msg: "{{ ansible_distribution_version }} is not a supported version."
  when: ansible_distribution == "Debian" and ansible_distribution_version|version_compare(8.5, '<')

- name: Fail if not a new release of Ubuntu
  fail:
    msg: "{{ ansible_distribution_version }} is not a supported version."
  when: ansible_distribution == "Ubuntu" and ansible_distribution_version|version_compare(13.04, '<')

- name: Check bootstrapped state
  stat:
    path: /etc/consul/.consul_bootstrapped
  register: bootstrap_marker
  ignore_errors: true
  tags: always

- name: Add Consul user
  user:
    name: "{{ consul_user }}"
    comment: "Consul user"
    group: "{{ consul_group }}"
    system: yes

- name: OS-specific variables
  include_vars: "{{ ansible_os_family }}.yml"
  tags: always

- name: Create directories
  file:
    dest: "{{ item }}"
    state: directory
    owner: "{{ consul_user }}"
    group: "{{ consul_group}}"
  with_items:
    - /etc/consul
    - /opt/consul
    - /var/consul
    - /var/log/consul
    - /var/run/consul
    - /etc/consul.d
    - /etc/consul.d/bootstrap
    - /etc/consul.d/client
    - /etc/consul.d/server

- name: Ensure bin path
  file:
    path: "{{ consul_bin_path }}"
    state: directory
    owner: root
    mode: 0755

- name: Install OS packages and consul
  include: install.yml

- include: firewall.yml

- block:
    - name: Check for key on previously boostrapped server
      slurp:
        src: "{{ consul_config_path }}/bootstrap/config.json"
      register: consul_config_b64
      run_once: true
      ignore_errors: yes

    - name: Deserialize existing config
      set_fact:
        consul_config: "{{ consul_config_b64.content | b64decode | from_json }}"
      run_once: true
      when: consul_config_b64.content is defined

    - name: Save encryption key (from existing config)
      set_fact:
        consul_raw_key: "{{ consul_config.encrypt }}"
      run_once: true
      when: consul_config is defined

  no_log: true
  when: consul_raw_key is not defined and bootstrap_marker.stat.exists and (consul_node_role == "bootstrap" or consul_node_role == "server")

- name: Write key locally to share with new servers
  local_action: copy content="{{ consul_raw_key }}" dest=/tmp/consul_raw.key
  become: no
  when: consul_raw_key is defined and bootstrap_marker.stat.exists

- name: Read key for servers that require it
  set_fact:
    consul_raw_key: "{{ lookup('file', '/tmp/consul_raw.key') }}"
  when: consul_raw_key is not defined and bootstrap_marker.stat.exists

- name: Deleting key file
  local_action: file path=/tmp/consul_raw.key state=absent
  become: no
  when: consul_raw_key is defined and bootstrap_marker.stat.exists

- block:
    - name: Generate gossip encryption key
      shell: "PATH={{ consul_bin_path }}:$PATH consul keygen"
      register: consul_keygen
      run_once: true

    - name: Save encryption key
      set_fact: consul_raw_key={{ consul_keygen.stdout }}
  when: consul_raw_key is not defined and not bootstrap_marker.stat.exists

- name: Select Consul network interface for Linux
  set_fact:
    consul_bind_address: "{{ hostvars[inventory_hostname]['ansible_'+ consul_iface ]['ipv4']['address'] }}"
  when: ansible_os_family == "Linux"

- name: Bootstrap configuration
  template:
    src: config_bootstrap.json.j2
    dest: "{{ consul_config_path }}/bootstrap/config.json"
    owner: "{{ consul_user }}"
    group: "{{ consul_group}}"
  notify:
    - restart consul

- name: Client configuration
  template:
    src: config_client.json.j2
    dest: "{{ consul_config_path }}/client/config.json"
    owner: "{{ consul_user }}"
    group: "{{ consul_group}}"
  notify:
    - restart consul

- name: Server configuration
  template:
    src: config_server.json.j2
    dest: "{{ consul_config_path }}/server/config.json"
    owner: "{{ consul_user }}"
    group: "{{ consul_group}}"
  notify:
    - restart consul

- name: Extra configurations
  template:
    src: consul_XXX_config_custom.json.j2
    dest: "{{ consul_config_path }}/{{ item }}/XXX_config_custom.json"
    owner: "{{ consul_user }}"
    group: "{{ consul_group}}"
  with_items:
    - [ "bootstrap", "client", "server" ]
  when: consul_config_custom is defined and item == consul_node_role
  notify:
    - restart consul

- include: acl.yml
  when: consul_acl_enable

- block:

  - name: Debian init script
    template:
      src: consul_debianinit.j2
      dest: /etc/init.d/consul
      owner: root
      group: root
      mode: 0755
    when: not ansible_service_mgr == "systemd" and ansible_os_family == "Debian"

  - name: systemd script
    template:
      src: consul_systemd.service.j2
      dest: /lib/systemd/system/consul.service
      owner: root
      group: root
      mode: 0644
    when: ansible_service_mgr == "systemd" and not ansible_os_family == "FreeBSD" and not ansible_os_family == "Solaris"

  - include: tls.yml
    when: consul_tls_enable

  - name: Start Consul
    service:
      name: consul
      state: started
      enabled: yes

  - name: Consul HTTP API reachable?
    wait_for:
      delay: 15
      port: 8500

  - name: Create bootstrapped marker
    file:
      dest: /etc/consul/.consul_bootstrapped
      state: touch

  - include: client.yml
    when: consul_node_role == "client" and ansible_os_family == "Debian"

  when: not bootstrap_marker.stat.exists
